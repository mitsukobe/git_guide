Step one: Set configuration options
- git config -- list : summarizes configuration options
- user.name
- user.email
- core.editor 

user.email=dimitra.bernidaki@ln2db.com
user.name=dimitra bernidaki
core.editor='C:/Program Files (x86)/Notepad++/notepad++.exe' -multiInst -nosession

Step two: initialize repository
- cd ...\mygitrepository_whateva
- git init

Step three: add files to staging area
-	git status
-	git add 

It turns out that Git stages a file exactly as it is when you run the git add command. 
If you commit now, the version of CONTRIBUTING.md as it was when you last ran the git 
add command is how it will go into the commit, not the version of the file as it looks 
in your working directory when you run git commit. If you modify a file after you run 
git add, you have to run git add again to stage the latest version of the file.

Step optional: git ignore
- https://github.com/github/gitignore

Step four: comparing
- git diff: That command compares what is in your working directory with what is in 
your staging area. The result tells you the changes you’ve made that you haven’t yet 
staged.

- git diff --staged: If you want to see what you’ve staged that will go into your next 
commit.

- git difftool: it uses vim and grafical file comparison

Step five: commit
- git commit: opens the default editor for the message of the commit
- git commit -m '' : the message can be written in the ''
- git commit -a: Adding the -a option to the git commit command makes Git automatically 
stage every file that is already tracked before doing the commit, letting you skip the 
git add part.

Now you’ve created your first commit! You can see that the commit has given you some 
output about itself: which branch you committed to (master), what SHA-1 checksum the
commit has (463dc4f), how many files were changed, and statistics about lines added 
and removed in the commit.

Step six: remove
- git rm
- git rm -f : If you modified the file and added it to the index already, you must force
the removal with the -f option. This is a safety feature to prevent accidental removal
of data that hasn’t yet been recorded in a snapshot and that can’t be recovered from 
Git.

Step optional:
- git mv file_from file_to

Step seven: log
- git log 
- git log -p: shows the difference introduced in each commit
- git log -p -2:  limits the output to only the last two entries
As you can see, the --stat option prints below each commit entry a list of modified files, how many files were changed, and how many lines in those files were added and removed. It also puts a summary of the information at the end.

More options:
-p
Show the patch introduced with each commit.

--stat
Show statistics for files modified in each commit.

--shortstat
Display only the changed/insertions/deletions line from the --stat command.

--name-only
Show the list of files modified after the commit information.

--name-status
Show the list of files affected with added/modified/deleted information as well.

--abbrev-commit
Show only the first few characters of the SHA-1 checksum instead of all 40.

--relative-date
Display the date in a relative format (for example, “2 weeks ago”) instead of using 
the full date format.

--graph
Display an ASCII graph of the branch and merge history beside the log output.

--pretty
Show commits in an alternate format. Options include oneline, short, full, fuller, 
and format (where you specify your own format).

-(n)
Show only the last n commits

--since, --after
Limit the commits to those made after the specified date.

--until, --before
Limit the commits to those made before the specified date.

--author
Only show commits in which the author entry matches the specified string.

--committer
Only show commits in which the committer entry matches the specified string.

--grep
Only show commits with a commit message containing the string

-S
Only show commits adding or removing code matching the string
